group 'com.wt.test'
version '1.0.0-SNAPSHOT'

description = "Gradle测试脚本"

//apply from: "greeting.gradle"
//apply from: "exception.gradle"
//apply from: "rules.gradle"
//apply from: "file.gradle"
//apply from: "customTask.gradle"

configurations {
    "gradle-scripts" {
        description = "Gradle Scripts"
        visible = false
    }
}

task printConfiguration{
    doLast {
       println configurations.getByName("gradle-scripts").getDescription()
    }
}

//class CompileTaskListener implements TaskExecutionGraphListener {
//    @Override
//    void graphPopulated(TaskExecutionGraph graph) {
//       graph.whenReady {
//           logger.info("task graph ready")
//       }
//    }
//}
//
//gradle.taskGraph.addTaskExecutionGraphListener(new CompileTaskListener())

////任务图
//gradle.taskGraph.whenReady {
////   println getRepositories().mavenLocal().getUrl()
//    println "config phase: taskGraph.whenReady"
//}
//
//gradle.taskGraph.beforeTask{
//    println "execute phase: taskGraph.beforeTask"
//}
//
//gradle.taskGraph.afterTask {
//    println "execute phase: taskGraph.afterTask"
//}

task prepareKotlinBuildScriptModel {

}

task compile {
    doLast {
        println "task ${name}"
    }
}

task compileTest(dependsOn: compile) {
    doLast {
        println "task ${name}"
    }
}

task test(dependsOn: [compile, compileTest]) {
    doLast {
        println "task ${name}"
    }
}

task dist(dependsOn: [compile, test]) {
    doLast {
        println "task ${name}"
    }
}

task install(dependsOn: [dist]) {
    doLast {
        println "task ${name}"
    }
}

//project.ext.tag = "scripts"
//
//println project.ext.tag
//
//ext {
//    tag = "shit"
//}
//
//println project.ext.tag
//
//println userName

